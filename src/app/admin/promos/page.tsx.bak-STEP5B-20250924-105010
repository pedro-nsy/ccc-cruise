"use client";
import { useEffect, useMemo, useState } from "react";
import { createClient } from "@supabase/supabase-js";
import toast, { Toaster } from "react-hot-toast";
import Header from "./sections/Header";
import StatsStrip from "./sections/StatsStrip";
import FiltersBar from "./sections/FiltersBar";
import GeneratorForm from "./sections/GeneratorForm";
import ListTable from "./sections/ListTable";
import DetailsDrawer from "./sections/DetailsDrawer";
import { Info } from "lucide-react";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

type Promo = {
  id: string | number;
  code: string;
  type: "early_bird" | "artist" | "staff";
  status: "active" | "disabled";
  used_count: number;
  created_at: string;
  updated_at: string;
  assigned_to_name: string | null;
  assigned_email: string | null;
  assigned_phone: string | null;
  expires_at: string | null;
  created_by: string | null;
};

type Stats = {
  created: { early_bird: number; artist: number; staff: number; total: number };
  used:    { early_bird: number; artist: number; staff: number; total: number };
  caps:    { early_bird: number; artist: number; staff: number | null };
};

type UsageRow = {
  id: string;
  booking_ref: string;
  traveler_id: string | null;
  status: "reserved" | "consumed" | "released";
  reserved_at: string | null;
  consumed_at: string | null;
  released_at: string | null;
  created_at: string;
  updated_at: string;
};

export default function AdminPromosPage() {
  const [sessionToken, setSessionToken] = useState<string>("");

  const [items, setItems] = useState<Promo[]>([]);
  const [stats, setStats] = useState<Stats | null>(null);

  // filters
  const [q, setQ] = useState("");
  const [type, setType] = useState("");
  const [status, setStatus] = useState("");
  const [used, setUsed] = useState("");          // "", "yes", "no"
  const [assigned, setAssigned] = useState("");  // "", "assigned", "unassigned"
  const [loading, setLoading] = useState(true);

  // details drawer
  const [openId, setOpenId] = useState<string | number | null>(null);
  const [openRow, setOpenRow] = useState<Promo | null>(null);
  const [usage, setUsage] = useState<UsageRow[] | null>(null);
  const [usageLoading, setUsageLoading] = useState(false);

  // (temp) generator
  const [genType, setGenType] = useState<""|"early_bird"|"artist"|"staff">("");
  const [qty, setQty] = useState(10);
  const [meta, setMeta] = useState({ name: "", email: "", phone: "", note: "" });
  const [genMsg, setGenMsg] = useState("");

  useEffect(() => {
    let alive = true;
    (async () => {
      const { data } = await supabase.auth.getSession();
      const token = data.session?.access_token || "";
      if (!token) { window.location.href = "/admin/login"; return; }
      if (alive) setSessionToken(token);
    })();
    return () => { alive = false; };
  }, []);

  async function fetchList() {
    if (!sessionToken) return;
    setLoading(true);
    const u = new URL("/api/admin/promos", window.location.origin);
    if (q) u.searchParams.set("q", q.trim().toUpperCase());
    if (type) u.searchParams.set("type", type);
    if (status) u.searchParams.set("status", status);
    if (used) u.searchParams.set("used", used);
    if (assigned) u.searchParams.set("assigned", assigned);

    const res = await fetch(u.toString(), { headers: { authorization: `Bearer ${sessionToken}` }});
    const data = await res.json().catch(() => ({}));
    if (res.ok) {
      setItems(data.items || []);
      setStats(data.stats || null);
    } else {
      toast.error(data?.error || "Failed to load promos");
    }
    setLoading(false);
  }
  useEffect(() => { fetchList(); /* eslint-disable-next-line */ }, [sessionToken]);

  async function toggleStatus(id: string|number, to: "active"|"disabled") {
    if (!sessionToken) return;
    const res = await fetch(`/api/admin/promos/${id}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json", authorization: `Bearer ${sessionToken}` },
      body: JSON.stringify({ status: to }),
    });
    if (res.ok) { toast.success(to === "active" ? "Code enabled" : "Code disabled"); fetchList(); }
    else {
      try { const j = await res.json(); toast.error(j?.error || "Update failed"); }
      catch { toast.error("Update failed"); }
    }
  }

  async function copyCode(code: string) {
    try { await navigator.clipboard.writeText(code); toast.success("Code copied"); }
    catch { toast.error("Couldn’t copy"); }
  }

  async function openDetails(row: Promo) {
    setOpenRow(row); setOpenId(row.id); setUsage(null); setUsageLoading(true);
    try {
      const res = await fetch(`/api/admin/promos/${row.id}/usage`, { headers: { authorization: `Bearer ${sessionToken}` }});
      const data = await res.json().catch(() => ({}));
      if (res.ok) setUsage(data.items || []);
      else toast.error(data?.error || "Failed to load history");
    } finally { setUsageLoading(false); }
  }
  function closeDetails(){ setOpenId(null); setOpenRow(null); setUsage(null); }

  async function createCodes(e: React.FormEvent) {
    e.preventDefault();
    setGenMsg("");
    if (!sessionToken) { setGenMsg("No session."); return; }
    if (!genType) { setGenMsg("Choose a promo type."); return; }
    const payload = {
      type: genType, qty,
      assigned_to_name: meta.name || null,
      assigned_email: meta.email || null,
      assigned_phone: meta.phone || null,
      note: meta.note || null,
    };
    const res = await fetch("/api/admin/promos", {
      method: "POST",
      headers: { "Content-Type": "application/json", authorization: `Bearer ${sessionToken}` },
      body: JSON.stringify(payload),
    });
    const data = await res.json().catch(() => ({}));
    if (!res.ok) { setGenMsg(data?.error || "Failed to create codes."); toast.error("Create failed"); return; }
    setGenMsg(`Created ${data.created} codes.`);
    toast.success(`Created ${data.created} code${data.created === 1 ? "" : "s"}`);
    fetchList();
  }

  const filtered = useMemo(() => items, [items]);

  return (
    <main className="mx-auto max-w-5xl space-y-8 mt-8">
      <Toaster position="top-right" />

      <Header />

      <StatsStrip stats={stats} />

      <FiltersBar
        q={q} type={type} status={status} used={used} assigned={assigned}
        setQ={setQ} setType={setType} setStatus={setStatus} setUsed={setUsed} setAssigned={setAssigned}
        onSearch={fetchList}
      />

      <GeneratorForm
        genType={genType} setGenType={setGenType}
        qty={qty} setQty={setQty}
        meta={meta} setMeta={setMeta}
        genMsg={genMsg}
        onSubmit={createCodes}
      />

      <ListTable
        items={filtered}
        loading={loading}
        onCopy={copyCode}
        onToggleStatus={toggleStatus}
        onOpenDetails={openDetails}
      />

      {openId && openRow && (
        <DetailsDrawer
          row={openRow}
          usage={usage}
          usageLoading={usageLoading}
          onClose={closeDetails}
        />
      )}
    </main>
  );
}
