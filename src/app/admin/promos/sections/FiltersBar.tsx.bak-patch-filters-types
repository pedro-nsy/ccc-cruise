"use client";
import { useRouter, usePathname, useSearchParams } from "next/navigation";
// NOTE: client boundary comes from parent page; no directive needed here.
import { useEffect, useState } from "react";

export default function FiltersBar({
  q, type, status, used,
  setQ, setType, setStatus, setUsed,
  onSearch
}: {
  q: string; type: string; status: string; used: string;
  setQ: (v: string)=>void; setType: (v: string)=>void; setStatus: (v: string)=>void; setUsed: (v: string)=>void;
  onSearch: () => void;
}) {
  // --- draft state: nothing applies until Search/Enter ---
  const [qDraft, setQDraft] = useState(q);
  const [typeDraft, setTypeDraft] = useState(type);
  const [statusDraft, setStatusDraft] = useState(status);
  const [usedDraft, setUsedDraft] = useState(used);

  // Keep drafts in sync when URL/props change (back/forward, Clear, links)
  useEffect(() => { setQDraft(q); }, [q]);
  useEffect(() => { setTypeDraft(type); }, [type]);
  useEffect(() => { setStatusDraft(status); }, [status]);
  useEffect(() => { setUsedDraft(used); }, [used]);

  function apply() {
    const url = new URL(window.location.origin + pathname + "?" + sp.toString());
    // set or clear params from drafts
    const setParam = (k, v) => { if (v && v !== "all") url.searchParams.set(k, v); else url.searchParams.delete(k); };
    setParam("q", qDraft?.trim() || "");
    setParam("type", typeDraft || "");
    setParam("status", statusDraft || "");
    setParam("used", usedDraft || "");
    url.searchParams.set("page", "1");
    router.replace(url.toString(), { scroll: false });
    onSearch();
  }

  function clearAll(e) {
    if (e) e.preventDefault();
    setQDraft(""); setTypeDraft(""); setStatusDraft(""); setUsedDraft("");
    const url = new URL(window.location.origin + pathname + "?" + sp.toString());
    url.searchParams.delete("q");
    url.searchParams.delete("type");
    url.searchParams.delete("status");
    url.searchParams.delete("used");
    url.searchParams.set("page", "1");
    router.replace(url.toString(), { scroll: false });
    onSearch();
  }

  return (
    <div className="sticky top-20 z-10">
      <div className="rounded-2xl border bg-white/80 backdrop-blur p-6 space-y-4">
        <div className="grid grid-cols-1 md:grid-cols-5 gap-3">
          <input
            className="rounded-xl border border-neutral-300 px-2.5 py-1.5 text-sm"
            placeholder="Search code or nameâ€¦"
            value={qDraft}
            onChange={e => setQDraft(e.target.value)}
            onKeyDown={e => { if (e.key === "Enter") apply(); }}
          />
          <select
            className="rounded-xl border border-neutral-300 px-2.5 py-1.5 text-sm"
            value={typeDraft}
            onChange={e => setTypeDraft(e.target.value)}
          >
            <option value="">All types</option>
            <option value="early_bird">Early Bird</option>
            <option value="artist">Artist</option>
            <option value="staff">Staff</option>
          </select>
          <select
            className="rounded-xl border border-neutral-300 px-2.5 py-1.5 text-sm"
            value={statusDraft}
            onChange={e => setStatusDraft(e.target.value)}
          >
            <option value="">All statuses</option>
            <option value="active">Active</option>
            <option value="archived">Archived</option>
            <option value="reserved">Reserved</option>
            <option value="consumed">Consumed</option>
          </select>
          <select
            className="rounded-xl border border-neutral-300 px-2.5 py-1.5 text-sm"
            value={usedDraft}
            onChange={e => setUsedDraft(e.target.value)}
          >
            <option value="">Used (all)</option>
            <option value="yes">Yes</option>
            <option value="no">No</option>
          </select>

          <div className="flex items-center justify-end gap-2">
            <button type="button" className="btn btn-primary text-sm px-2.5 py-1.5" onClick={apply}>Search</button>
            <a href="/admin/promos?page=1" className="btn btn-ghost text-sm px-2.5 py-1.5" onClick={clearAll}>Clear</a>
          </div>
        </div>
      </div>
    </div>
  );
}
