"use client";
import { useEffect, useMemo, useState } from "react";
import { useRouter } from "next/navigation";

type CategoryKey = "INTERIOR" | "OCEANVIEW" | "BALCONY";
type Layout = { doubles:number; triples:number; quads:number; cabins:number; seats:number; totalCents:number; totalLabel:string; recommended?:boolean };
type Category = {
  key: CategoryKey;
  label: string;
  fromCents: number;
  fromLabel: string;              // "MXN 28,800 pp (double)"
  hasStaff: boolean;
  hasArtist: boolean;
  hasEb: boolean;
  artistRemaining: number;        // Step 1 addition
  ebRemaining: number;            // Step 1 addition
  disabledReason: string | null;  // gate from promos / capacity
  layouts: Layout[];
};

type OptionsResponse = {
  ok: true;
  groupSize: number;
  adults: number;
  categories: Category[];
} | { ok:false; error:string };

function cx(...cls:(string|false|undefined|null)[]) {
  return cls.filter(Boolean).join(" ");
}

export default function Page() {
  const router = useRouter();
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState<string|undefined>();
  const [groupSize, setGroupSize] = useState<number>(0);
  const [categories, setCategories] = useState<Category[]>([]);
  const [selectedCat, setSelectedCat] = useState<CategoryKey | null>(null);
  const [selectedLayoutIdx, setSelectedLayoutIdx] = useState<number | null>(null);

  // Fetch options
  useEffect(() => {
    let cancelled = false;
    async function run() {
      try {
        const res = await fetch("/api/booking/cabins/options", { cache: "no-store" });
        const json = await res.json() as OptionsResponse;
        if (!json.ok) throw new Error(json.error || "Failed to load options");
        if (cancelled) return;

        setGroupSize(json.groupSize);
        setCategories(json.categories);

        // Preselect first enabled category if none chosen yet
        const firstEnabled = json.categories.find(c => !c.disabledReason) || json.categories[0] || null;
        setSelectedCat(firstEnabled ? firstEnabled.key : null);
        setSelectedLayoutIdx(null);
        setLoading(false);
      } catch (e:any) {
        if (cancelled) return;
        setErr(e?.message || "Failed to load");
        setLoading(false);
      }
    }
    run();
    return () => { cancelled = true; };
  }, []);

  const selectedCategory = useMemo(
    () => categories.find(c => c.key === selectedCat) || null,
    [categories, selectedCat]
  );

  function onChooseCategory(key: CategoryKey, disabled: boolean) {
    if (disabled) return;
    setSelectedCat(key);
    setSelectedLayoutIdx(null);
  }

  function onChooseLayout(i: number) {
    setSelectedLayoutIdx(i);
  }

  async function onContinue(e: React.FormEvent) {
    e.preventDefault();
    if (!selectedCategory || selectedLayoutIdx == null) return;

    const chosenLayout = selectedCategory.layouts[selectedLayoutIdx];
    if (!chosenLayout) return;

    const body = {
      category: selectedCategory.key,
      layout: {
        doubles: chosenLayout.doubles,
        triples: chosenLayout.triples,
        quads: chosenLayout.quads,
        cabins: chosenLayout.cabins,
      }
    };

    const res = await fetch("/api/booking/cabins/select", {
      method: "POST",
      headers: { "content-type": "application/json" },
      body: JSON.stringify(body),
    });
    const json = await res.json();
    if (!json.ok) {
      alert(json.error || "Unable to save selection");
      return;
    }
    router.push("/booking/cabins/assign");
  }

  if (loading) {
    return (
      <div className="mx-auto max-w-xl sm:max-w-2xl rounded-2xl border bg-white p-6 text-center text-neutral-600">
        Loading layouts…
      </div>
    );
  }
  if (err) {
    return (
      <div className="mx-auto max-w-xl sm:max-w-2xl rounded-2xl border bg-red-50 p-6 text-center text-red-700">
        {err}
      </div>
    );
  }

  return (
    <form onSubmit={onContinue} className="mx-auto max-w-xl sm:max-w-2xl space-y-8">
      {/* Page header */}
      <header className="text-center space-y-3">
        <h1 className="text-2xl md:text-3xl font-semibold">Select your cabin category and layout</h1>
        <p className="text-neutral-700">
          We’ll only show layouts that make sense for your group size ({groupSize}) and ensure there’s at least one adult per cabin.
        </p>
        <p className="text-neutral-600 text-sm">
          Prices shown are per person for each category in double occupancy; final pricing is confirmed on the Review step.
        </p>
      </header>

      {/* Section 1: Category selection */}
      <section className="space-y-3">
        <h2 className="text-xl md:text-2xl font-semibold text-center">Choose your preferred category</h2>
        <p className="text-sm text-neutral-600 text-center">Pick the cabin type you want. You’ll choose the layout next.</p>

        <div className="grid grid-cols-1 gap-4">
          {categories.map(cat => {
            const active = selectedCat === cat.key && !cat.disabledReason;
            const disabled = !!cat.disabledReason;

            return (
              <div
                key={cat.key}
                role="button"
                tabIndex={disabled ? -1 : 0}
                onClick={() => onChooseCategory(cat.key, disabled)}
                onKeyDown={(e)=>{ if ((e.key === "Enter" || e.key === " ") && !disabled) onChooseCategory(cat.key, disabled); }}
                data-active={active || undefined}
                className={cx(
                  "rounded-2xl border bg-white p-5 cursor-pointer",
                  "hover:border-neutral-300 focus:outline-none focus:ring-2 focus:ring-blue-200",
                  "transition",
                  disabled && "opacity-60 pointer-events-none",
                  active && "border-blue-600 ring-2 ring-blue-100"
                )}
              >
                {/* Hidden radio for a11y */}
                <input
                  type="radio"
                  name="category"
                  className="sr-only"
                  checked={active}
                  readOnly
                  aria-label={`Select ${cat.label}`}
                />

                {/* Top row: label + chips */}
                <div className="flex items-start justify-between gap-4">
                  <div className="space-y-1">
                    <div className="text-lg font-medium">{cat.label}</div>
                    <div className="text-sm text-neutral-600">From <span className="font-medium">{cat.fromLabel}</span></div>
<div className="text-xs text-neutral-500">Promo prices apply at Review.</div>
                  </div>

                  
                  {/* Promo chips (right) — only show chips for promo types present */}
                  {(cat.hasArtist || cat.hasEb) && (
                    <div className="flex items-center gap-2">
                      {cat.hasArtist && (
                        <span className="inline-flex items-center rounded-xl px-2.5 py-1 border text-xs bg-green-50 text-green-700 border-green-200">
                          Artist: {cat.artistRemaining} left
                        </span>
                      )}
                      {cat.hasEb && (
                        <span className="inline-flex items-center rounded-xl px-2.5 py-1 border text-xs bg-blue-50 text-blue-700 border-blue-200">
                          Early Bird: {cat.ebRemaining} left
                        </span>
                      )}
                    </div>
                  )}
                </div>
        )}
                </div>

                {/* Disabled banner */}
                {disabled && (
                  <div className="mt-4 rounded-xl border border-amber-300 bg-amber-50 p-3 text-sm text-amber-800">
                    {cat.disabledReason}
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </section>

      {/* Section 2: Layouts for selected category */}
      <section className="space-y-3">
        <h2 className="text-xl md:text-2xl font-semibold text-center">
          {selectedCategory ? `Available layouts for ${selectedCategory.label}` : "Available layouts"}
        </h2>
        <p className="text-sm text-neutral-600 text-center">
          You can assign each traveler in your group to a cabin on the next step.
        </p>

        {!selectedCategory ? (
          <div className="rounded-xl border bg-neutral-50 p-4 text-sm text-neutral-700 text-center">
            Choose a category above to see layouts.
          </div>
        ) : selectedCategory.disabledReason ? (
          <div className="rounded-xl border border-amber-300 bg-amber-50 p-4 text-sm text-amber-800">
            This category isn’t available with your promo codes right now.
          </div>
        ) : selectedCategory.layouts.length === 0 ? (
          <div className="rounded-xl border bg-neutral-50 p-4 text-sm text-neutral-700">
            We couldn’t find a feasible layout for your group size in this category.
          </div>
        ) : (
          <div className="rounded-2xl border p-4 sm:p-5">
            <div className="grid grid-cols-1 gap-4">
            {selectedCategory.layouts.map((L, i) => {
              const active = selectedLayoutIdx === i;
              const labelParts:string[] = [];
              if (L.quads)   labelParts.push(`${L.quads}× quad`);
              if (L.triples) labelParts.push(`${L.triples}× triple`);
              if (L.doubles) labelParts.push(`${L.doubles}× double`);
              const layoutName = labelParts.join(" · ");

              return (
                <label
                  key={i}
                  data-active={active || undefined}
                  className={cx(
                    "rounded-2xl border bg-white p-5 cursor-pointer",
                    "hover:border-neutral-300 focus:outline-none focus:ring-2 focus:ring-blue-200",
                    active && "border-blue-600 ring-2 ring-blue-100"
                  )}
                >
                  <div className="flex items-start justify-between gap-4">
                    <div className="space-y-1">
                      <div className="flex items-center gap-2">
                        <input
                          type="radio"
                          name="layout"
                          className="h-4 w-4"
                          checked={active}
                          onChange={() => onChooseLayout(i)}
                        />
                        <div className="text-lg font-medium">{layoutName}</div>
                        {L.recommended && (
                          <span className="inline-flex items-center rounded-xl px-2.5 py-1 border text-xs bg-green-50 text-green-700 border-green-200">
                            Recommended
                          </span>
                        )}
                      </div>
                      <div className="text-sm text-neutral-600">
                        {L.cabins} stateroom{L.cabins === 1 ? "" : "s"} · assign travelers to a cabin on the next step.
                      </div>
                    </div>

</div>
                </label>
              );
            })}
          </div>
          </div>
        )}

        {/* Staff note — only when staff promos exist */}
        {selectedCategory?.hasStaff && (
          <p className="text-xs text-neutral-500 text-center">
            Staff upgrades will be calculated automatically.
          </p>
        )}

        {/* Connected rooms note */}
        <p className="text-xs text-neutral-500 text-center">
          Connected rooms aren’t guaranteed, but we’ll keep your staterooms as close together as possible. Each cabin must include at least one adult.
        </p>
      </section>

      {/* Actions */}
      <div className="flex items-center justify-between">
        <button type="button" onClick={() => router.push("/booking/travelers")} className="btn btn-ghost">
          Back
        </button>
        <button
          type="submit"
          className="btn btn-primary disabled:opacity-60"
          disabled={!selectedCategory || selectedLayoutIdx == null || !!selectedCategory.disabledReason}
        >
          Continue
        </button>
      </div>
    </form>
  );
}
