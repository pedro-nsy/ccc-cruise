// tools/patch-details-archive-subline.js
const fs = require("fs");
const path = require("path");

const file = path.join(
  __dirname,
  "..",
  "src",
  "app",
  "admin",
  "promos",
  "sections",
  "DetailsDrawer.tsx"
);

let src = fs.readFileSync(file, "utf8");
let orig = src;

// 1) Import fmtDateTime
src = src.replace(
  /import \{ fmtDate,\s*yesNo,\s*prettyPhone \} from "\.\/format";/,
  'import { fmtDate, fmtDateTime, yesNo, prettyPhone } from "./format";'
);

// 2) Use fmtDateTime for the “Generated” timestamp and label “Generated”
src = src.replace(
  /(\{row\.created_by \? `)Created by (\$\{row\.created_by\}` : ")Created("\}\))/,
  '$1Generated by $2Generated$3'
);
src = src.replace(
  /\{new Date\(row\.created_at\)\.toLocaleString\(\)\}/,
  "{fmtDateTime(row.created_at)}"
);

// 3) Replace the usage map to:
//    - sort oldest → newest
//    - add archived/reactivated variants
//    - add subline for archived with booking_ref
//    - use fmtDateTime
src = src.replace(
  /usage\.map\(\(u:any\) => \{[\s\S]*?\}\)\)/,
  `([...usage].sort((a:any,b:any) => {
                    const ta = a.created_at ? new Date(a.created_at).getTime() : 0;
                    const tb = b.created_at ? new Date(b.created_at).getTime() : 0;
                    return ta - tb;
                  })).map((u:any) => {
                    const when =
                      u.status === "reserved" ? u.reserved_at :
                      u.status === "consumed" ? u.consumed_at :
                      u.status === "released" ? u.released_at :
                      u.created_at;
                    const whenTxt = when ? fmtDateTime(when) : "—";

                    const travelerTxt = u.traveler_name ? \` (\${u.traveler_name})\` : "";

                    let line = "";
                    let sub = "";

                    if (u.status === "reserved") {
                      line = \`Reserved for booking \${u.booking_ref || "—"}\${travelerTxt}\`;
                    } else if (u.status === "released") {
                      line = "Released";
                    } else if (u.status === "consumed") {
                      line = "Consumed";
                    } else if (u.status === "archived") {
                      line = "Archived";
                      if (u.booking_ref) sub = \`Released from booking \${u.booking_ref}\`;
                    } else if (u.status === "reactivated") {
                      line = "Reactivated";
                    } else {
                      line = u.status || "Event";
                    }

                    return (
                      <div key={u.id} className="text-sm">
                        <div className="text-neutral-700">{line}</div>
                        {sub ? <div className="text-xs text-neutral-600">{sub}</div> : null}
                        <div className="text-xs text-neutral-500">{whenTxt}</div>
                      </div>
                    );
                  }))`
);

if (src !== orig) {
  fs.writeFileSync(file, src, "utf8");
  console.log("✓ Patched DetailsDrawer.tsx for archived subline + timeline polish.");
} else {
  console.log("No changes applied. (Patterns not found — file may already be patched.)");
}
